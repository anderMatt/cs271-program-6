Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/08/18 18:23:24
Program 6      (program6.asm				     Page 1 - 1


				TITLE Program 6      (program6.asm)

				; Author: Matthew Anderson			anderma8@oregonstate.edu
				; Course: CS 271 - Program 6        Date: March 8, 2018
				;
				; Description: Presents the user with an nCr combinatorics problem,
				;  and evaluates the entered answer. 'n' will be a random number in [3, 12],
				;  and 'r' will be a random number in [1, n]. Repeats until user decides to
				;  exit. Demonstrates recursive implementation of calculating nCr.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000003			N_MIN = 3
 = 0000000C			N_MAX = 12
 = 00000001			R_MIN = 1				;R_MAX depends on user input.
 = 0000000B			INPUT_BUFFER_SIZE = 11	;Size of user answer input buffer.

				;--------------------------------------------------
				mWriteStr MACRO buffer				
				;
				; This macro prints a string. Accepts location
				; of the string buffer.
				;
				; Implementation borrowed from Week 9 class 
				;  lectures.
				;--------------------------------------------------
					push	edx
					mov		edx, OFFSET buffer
					call	WriteString
					pop		edx

				ENDM
				;--------------------------------------------------


 00000000			.data
 00000000 43 6F 6D 62 69	programName		BYTE	"Combinatorics Quiz",0
	   6E 61 74 6F 72
	   69 63 73 20 51
	   75 69 7A 00
 00000013 57 72 69 74 74	myName			BYTE	"Written By: Matthew Anderson",0
	   65 6E 20 42 79
	   3A 20 4D 61 74
	   74 68 65 77 20
	   41 6E 64 65 72
	   73 6F 6E 00
 00000030 49 20 77 69 6C	instruct1		BYTE	"I will ask you to calculate the number of possible",0
	   6C 20 61 73 6B
	   20 79 6F 75 20
	   74 6F 20 63 61
	   6C 63 75 6C 61
	   74 65 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 70 6F 73
	   73 69 62 6C 65
	   00
 00000063 63 6F 6D 62 69	instruct2		BYTE	"combinations of r items taken from a set of n items (nCr),",0
	   6E 61 74 69 6F
	   6E 73 20 6F 66
	   20 72 20 69 74
	   65 6D 73 20 74
	   61 6B 65 6E 20
	   66 72 6F 6D 20
	   61 20 73 65 74
	   20 6F 66 20 6E
	   20 69 74 65 6D
	   73 20 28 6E 43
	   72 29 2C 00
 0000009E 61 6E 64 20 63	instruct3		BYTE	"and check that your answer is correct.",0
	   68 65 63 6B 20
	   74 68 61 74 20
	   79 6F 75 72 20
	   61 6E 73 77 65
	   72 20 69 73 20
	   63 6F 72 72 65
	   63 74 2E 00

 000000C5 4E 75 6D 62 65	nStr			BYTE	"Number of elements in the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 000000E5 4E 75 6D 62 65	rStr			BYTE	"Number of elements to choose from the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00
 00000111 48 6F 77 20 6D	problemPrompt	BYTE	"How many ways can you choose? ",0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   00
 00000130  0000000B [		usrAnswerStr	BYTE	INPUT_BUFFER_SIZE DUP(?)
	    00
	   ]
 0000013B 59 6F 75 20 6D	inputErrMsg		BYTE	"You must enter a positive integer! Try again: ",0
	   75 73 74 20 65
	   6E 74 65 72 20
	   61 20 70 6F 73
	   69 74 69 76 65
	   20 69 6E 74 65
	   67 65 72 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00

 0000016A 54 68 65 72 65	ansStr1			BYTE	"There are ",0
	   20 61 72 65 20
	   00
 00000175 20 63 6F 6D 62	ansStr2			BYTE	" combinations of ",0
	   69 6E 61 74 69
	   6F 6E 73 20 6F
	   66 20 00
 00000187 20 69 74 65 6D	ansStr3			BYTE	" items from a set of ",0
	   73 20 66 72 6F
	   6D 20 61 20 73
	   65 74 20 6F 66
	   20 00
 0000019D 2E 00			ansStr4			BYTE	".",0

 0000019F 59 6F 75 20 6E	incorrectStr	BYTE	"You need to hit the books and study some more!",0
	   65 65 64 20 74
	   6F 20 68 69 74
	   20 74 68 65 20
	   62 6F 6F 6B 73
	   20 61 6E 64 20
	   73 74 75 64 79
	   20 73 6F 6D 65
	   20 6D 6F 72 65
	   21 00
 000001CE 57 65 6C 6C 20	correctStr		BYTE	"Well done, you answered correctly!",0
	   64 6F 6E 65 2C
	   20 79 6F 75 20
	   61 6E 73 77 65
	   72 65 64 20 63
	   6F 72 72 65 63
	   74 6C 79 21 00
 000001F1 57 6F 75 6C 64	playAgainStr	BYTE	"Would you like to play again? (y/n): ",0 
	   20 79 6F 75 20
	   6C 69 6B 65 20
	   74 6F 20 70 6C
	   61 79 20 61 67
	   61 69 6E 3F 20
	   28 79 2F 6E 29
	   3A 20 00
 00000217 56 61 6C 75 65	playAgainErr	BYTE	"Value other than 'y' or 'n' entered, so I'm going to exit!",0
	   20 6F 74 68 65
	   72 20 74 68 61
	   6E 20 27 79 27
	   20 6F 72 20 27
	   6E 27 20 65 6E
	   74 65 72 65 64
	   2C 20 73 6F 20
	   49 27 6D 20 67
	   6F 69 6E 67 20
	   74 6F 20 65 78
	   69 74 21 00
 00000252 47 6F 6F 64 62	goodbyeStr		BYTE	"Goodbye!",0
	   79 65 21 00
 0000025B 00			playAgainBuffer	BYTE	?

 0000025C 00000000		nVal			DWORD	?
 00000260 00000000		rVal			DWORD	?
 00000264 00000000		usrAnswer		DWORD	?

 00000268 00000000		theAnswer		DWORD 0


 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call	Randomize			;Seed random number generator.
 00000005  E8 00000075			call	Introduction

 0000000A			play:

 0000000A  68 0000025C R		push	OFFSET nVal
 0000000F  68 00000260 R		push	OFFSET rVal
 00000014  E8 000000C1			call	ShowProblem

					;Calculate the answer.
 00000019  FF 35 0000025C R		push	nVal
 0000001F  FF 35 00000260 R		push	rVal
 00000025  68 00000268 R		push	OFFSET theAnswer
 0000002A  E8 000001C7			call	Combinations

					;Get user's answer.
 0000002F  68 00000264 R		push	OFFSET	usrAnswer
 00000034  E8 0000010A			call	GetData
 00000039  E8 00000000 E		call	CrLf

					;Report answer.
 0000003E  FF 35 0000025C R		push	nVal
 00000044  FF 35 00000260 R		push	rVal
 0000004A  FF 35 00000268 R		push	theAnswer
 00000050  FF 35 00000264 R		push	usrAnswer
 00000056  E8 0000021B			call	ShowResults

					;Ask if user wants another problem.
 0000005B  E8 0000029D			call	AskPlayAgain
 00000060  74 A8			jz		play

 00000062  E8 00000000 E		call	CrLf
					mWriteStr goodbyeStr
 00000067  52		     1		push	edx
 00000068  BA 00000252 R     1		mov		edx, OFFSET goodbyeStr
 0000006D  E8 00000000 E     1		call	WriteString
 00000072  5A		     1		pop		edx
 00000073  E8 00000000 E		call	CrLf


					exit	; exit to operating system
 00000078  6A 00	   *	    push   +000000000h
 0000007A  E8 00000000 E   *	    call   ExitProcess
 0000007F			main ENDP

				;--------------------------------------------------
 0000007F			Introduction PROC
				;
				; Prints a greeting message and program
				; instructions.
				;
				;--------------------------------------------------
					mWriteStr	programName
 0000007F  52		     1		push	edx
 00000080  BA 00000000 R     1		mov		edx, OFFSET programName
 00000085  E8 00000000 E     1		call	WriteString
 0000008A  5A		     1		pop		edx
 0000008B  E8 00000000 E		call		CrLf
					mWriteStr	myName
 00000090  52		     1		push	edx
 00000091  BA 00000013 R     1		mov		edx, OFFSET myName
 00000096  E8 00000000 E     1		call	WriteString
 0000009B  5A		     1		pop		edx
 0000009C  E8 00000000 E		call		CrLf
 000000A1  E8 00000000 E		call		CrLf
					mWriteStr	instruct1
 000000A6  52		     1		push	edx
 000000A7  BA 00000030 R     1		mov		edx, OFFSET instruct1
 000000AC  E8 00000000 E     1		call	WriteString
 000000B1  5A		     1		pop		edx
 000000B2  E8 00000000 E		call		CrLf
					mWriteStr	instruct2
 000000B7  52		     1		push	edx
 000000B8  BA 00000063 R     1		mov		edx, OFFSET instruct2
 000000BD  E8 00000000 E     1		call	WriteString
 000000C2  5A		     1		pop		edx
 000000C3  E8 00000000 E		call		CrLf
					mWriteStr	instruct3
 000000C8  52		     1		push	edx
 000000C9  BA 0000009E R     1		mov		edx, OFFSET instruct3
 000000CE  E8 00000000 E     1		call	WriteString
 000000D3  5A		     1		pop		edx
 000000D4  E8 00000000 E		call		CrLf

 000000D9  C3				ret

 000000DA			Introduction ENDP


				;--------------------------------------------------
 000000DA			ShowProblem PROC
				;
				; Generates an nCr combinatorics problem for the user
				; to solve. 'n' is a randomly generated number in
				; [N_MIN, N_MAX]. 'r' is a randomly generated number
				; in [R_MIN, n].
				;
				; Receives the stack parameters (@n, @r).
				;	@n: the address to store the generated value
				;	 of n.
				;	@r: the address to store the generated value
				;	 of r.
				;--------------------------------------------------
 000000DA  55				push	ebp
 000000DB  8B EC			mov		ebp, esp
					
					;To generate 'n', we need to pass N_MAX - N_MIN + 1 to RandomRange.
 000000DD			genN:
 000000DD  B8 0000000C			mov		eax, N_MAX
 000000E2  83 E8 03			sub		eax, N_MIN
 000000E5  40				inc		eax

 000000E6  E8 00000000 E		call	RandomRange			;Generate 'n'.
 000000EB  83 C0 03			add		eax, N_MIN			;Get generated value into valid range.

 000000EE  8B 7D 0C			mov		edi, [ebp + 12]		;Load @n.
 000000F1  89 07			mov		[edi], eax			;Save 'n'

 000000F3  E8 00000000 E		call	CrLf
 000000F8  E8 00000000 E		call	CrLf
 000000FD			printN:							;Print number of elements.
					mWriteStr nStr
 000000FD  52		     1		push	edx
 000000FE  BA 000000C5 R     1		mov		edx, OFFSET nStr
 00000103  E8 00000000 E     1		call	WriteString
 00000108  5A		     1		pop		edx
 00000109  E8 00000000 E		call	WriteDec
 0000010E  E8 00000000 E		call	CrLf

 00000113			genR:
 00000113  83 E8 01			sub		eax, R_MIN			;Pass 'n' - R_MIN + 1 to RandomRange. EAX contains 'n'.
 00000116  40				inc		eax

 00000117  E8 00000000 E		call	RandomRange
 0000011C  83 C0 01			add		eax, R_MIN			;EAX contains 'r'.

 0000011F  8B 7D 08			mov		edi, [ebp + 8]
 00000122  89 07			mov		[edi], eax			;Save 'r'.

 00000124			printR:
					mWriteStr rStr
 00000124  52		     1		push	edx
 00000125  BA 000000E5 R     1		mov		edx, OFFSET rStr
 0000012A  E8 00000000 E     1		call	WriteString
 0000012F  5A		     1		pop		edx
 00000130  E8 00000000 E		call	WriteDec
 00000135  E8 00000000 E		call	CrLf
 0000013A  E8 00000000 E		call	CrLf

 0000013F  5D				pop		ebp
 00000140  C2 0008			ret 8
					
 00000143			ShowProblem ENDP


				;--------------------------------------------------
 00000143			GetData PROC
				;
				; Prompts user to enter their answer to the nCr
				; problem. Validates the entered string into
				; the numeric value it represents.

				; Receives the stack parameters (@a).
				;	@a: Address to store user's answer.
				;--------------------------------------------------
 00000143  55				push	ebp
 00000144  8B EC			mov		ebp, esp
 00000146  8B 7D 08			mov		edi, [ebp + 8]		;EDI contains destination address.

					mWriteStr problemPrompt
 00000149  52		     1		push	edx
 0000014A  BA 00000111 R     1		mov		edx, OFFSET problemPrompt
 0000014F  E8 00000000 E     1		call	WriteString
 00000154  5A		     1		pop		edx

 00000155			getInput:
 00000155  BA 00000130 R		mov		edx, OFFSET usrAnswerStr
 0000015A  B9 0000000A			mov		ecx, INPUT_BUFFER_SIZE - 1
 0000015F  E8 00000000 E		call	ReadString			;usrAnswerStr contains entered string.

 00000164  68 00000130 R		push	OFFSET usrAnswerStr
 00000169  50				push	eax					;Size of input string.
 0000016A  E8 00000025			call	IsNumeric

 0000016F  74 13			jz		convertInput			

					;User entered a non-numeric string. Print error, and try again.
 00000171  E8 00000000 E		call	CrLf
					mWriteStr	inputErrMsg
 00000176  52		     1		push	edx
 00000177  BA 0000013B R     1		mov		edx, OFFSET inputErrMsg
 0000017C  E8 00000000 E     1		call	WriteString
 00000181  5A		     1		pop		edx
 00000182  EB D1			jmp		getInput

 00000184			convertInput:	
					
 00000184  68 00000130 R		push	OFFSET usrAnswerStr
 00000189  50				push	eax					;Number of digits in entered string.
 0000018A  57				push	edi					;Output variable.
 0000018B  E8 00000036			call	StringToNumber

 00000190  5D				pop	ebp

 00000191  C2 0004			ret 4

 00000194			GetData ENDP


				;--------------------------------------------------
 00000194			IsNumeric PROC
				;
				; Checks if a string represents a valid POSITIVE 
				; integer.

				; Receives the stack parameters (@a, size).
				;	@a: Address of the string.
				;	size: size of the string.
				;
				; Returns: ZF = 1 if the string represents a valid
				; integer; else, ZF = 0.
				;--------------------------------------------------
 00000194  56				push	esi
 00000195  51				push	ecx
 00000196  50				push	eax
 00000197  53				push	ebx
 00000198  55				push	ebp
 00000199  8B EC			mov		ebp, esp

 0000019B  8B 75 1C			mov		esi, [ebp + 28]		;ESI contains address of string.
 0000019E  8B 4D 18			mov		ecx, [ebp + 24]		;ECX contains size of string.
 000001A1  FC				cld

					;Check if string is empty. If yes, set ZF = 0 and finish.
 000001A2  83 F9 00			cmp		ecx, 0
 000001A5  74 12			je		emptyStr

 000001A7			nextDigit:
 000001A7  AC				lodsb						;AL contains next character.

					;Valid numeric characters will have ASCII codes in [48, 57].
 000001A8  3C 30			cmp		al, 48
 000001AA  7C 12			jl		finished			;ZF = 0
 000001AC  3C 39			cmp		al, 57
 000001AE  7F 0E			jg		finished			;ZF = 0

 000001B0  E2 F5			loop	nextDigit

 000001B2  33 C0			xor		eax, eax
 000001B4  83 F8 00			cmp		eax, 0				;Set ZF = 1, since string is valid integer representation.
 000001B7  EB 05			jmp		finished

 000001B9			emptyStr:	;String was empty. Set ZF = 0, since this isn't valid numeric representation.
 000001B9  33 C0			xor		eax, eax
 000001BB  83 F8 01			cmp		eax, 1

 000001BE			finished:
 000001BE  5D				pop		ebp
 000001BF  5B				pop		ebx
 000001C0  58				pop		eax
 000001C1  59				pop		ecx
 000001C2  5E				pop		esi

 000001C3  C2 0008			ret		8

 000001C6			IsNumeric ENDP

				;--------------------------------------------------
 000001C6			StringToNumber PROC
				;
				; Generates the numeric value of a string representation
				; of a positive integer.
				;
				; Receives stack parameters (@s, n, @o).
				;	@s: string representation of positive integer.
				;	n: number of characters before null-terminator.
				;	@o: output variable to store numeric value.
				;
				;--------------------------------------------------
 000001C6  50				push	eax
 000001C7  56				push	esi
 000001C8  51				push	ecx
 000001C9  53				push	ebx
 000001CA  55				push	ebp

 000001CB  8B EC			mov		ebp, esp

 000001CD  8B 75 20			mov		esi, [ebp + 32]		;Load address of string.
 000001D0  8B 4D 1C			mov		ecx, [ebp + 28]		;Load number of characters.
 000001D3  8B 7D 18			mov		edi, [ebp + 24]		;Load output variable.

 000001D6  33 C0			xor		eax, eax			;Holds numeric value.

 000001D8			convertChar:
 000001D8  BB 0000000A			mov		ebx, 10
 000001DD  F7 E3			mul		ebx

 000001DF  50				push	eax					;Save current value before loading next byte.
 000001E0  AC				lodsb

 000001E1  0F B6 D8			movzx	ebx, al
 000001E4  83 EB 30			sub		ebx, 48				;Convert char to numeric value.

 000001E7  58				pop		eax
 000001E8  03 C3			add		eax, ebx			;Add digit to accumulating value.

 000001EA  E2 EC			loop	convertChar

 000001EC  89 07			mov		[edi], eax			;Save numeric value to output variable.

 000001EE  5D				pop		ebp
 000001EF  5B				pop		ebx
 000001F0  59				pop		ecx
 000001F1  5E				pop		esi
 000001F2  58				pop		eax

 000001F3  C2 000C			ret 12

 000001F6			StringToNumber ENDP


				;--------------------------------------------------
 000001F6			Combinations PROC
				;
				; Calculates the answer to an nCr problem, using the
				; formula n!/(r!(n-r)!)
				;
				; Accepts the stack parameters(n, r, @answer)
				;	n: Value of n.
				;	r: Value of r.
				;	@answer: Address to store the answer.
				;
				;--------------------------------------------------

 000001F6  60				pushad
 000001F7  8B EC			mov		ebp, esp

 000001F9  8B 45 2C			mov		eax, [ebp + 44]		;Load n.
 000001FC  8B 7D 24			mov		edi, [ebp + 36]		;Load address.

 000001FF			nFac:
					;Calculate n!
 000001FF  50				push	eax
 00000200  57				push	edi
 00000201  E8 0000003D			call	Factorial			

 00000206  8B 07			mov		eax, [edi]			;EAX contains n!

 00000208			rFac:
					;Calculate r!
 00000208  B9 00000000			mov		ecx, 0
 0000020D  89 0F			mov		[edi], ecx			;Reset for next factorial calculation.
 0000020F  8B 5D 28			mov		ebx, [ebp + 40]		;Load r

 00000212  53				push	ebx
 00000213  57				push	edi
 00000214  E8 0000002A			call	Factorial

 00000219  8B 1F			mov		ebx, [edi]			;EBX contains r!

 0000021B			nMinRFac:

					;Calculate (n-r)!
 0000021B  8B 4D 2C			mov		ecx, [ebp + 44]		;load n.
 0000021E  8B 55 28			mov		edx, [ebp + 40]		;load r.
 00000221  2B CA			sub		ecx, edx			;ECX = (n-r)

 00000223  BA 00000000			mov		edx, 0
 00000228  89 17			mov		[edi], edx			;Reset for next factorial combination.
 0000022A  51				push	ecx
 0000022B  57				push	edi
 0000022C  E8 00000012			call	Factorial			

 00000231  8B 0F			mov		ecx, [edi]			;ECX = (n-r)!

 00000233			finalAnswer:

					;Calculate n!/r!(n-r)!

 00000233  50				push	eax					;Save n!
 00000234  8B C3			mov		eax, ebx			;EAX = r!
 00000236  F7 E1			mul		ecx					;ECX = (n-r)!

 00000238  8B D8			mov		ebx, eax			;EBX = r!(n-r)!
 0000023A  58				pop		eax					;restore n!

 0000023B  F7 F3			div		ebx					
					;mov		edi, [ebp + 36]		;Load output address.
 0000023D  89 07			mov		[edi], eax			;Store answer

 0000023F  61				popad

 00000240  C2 000C			ret 12
 00000243			Combinations ENDP

				;--------------------------------------------------
 00000243			Factorial PROC
				;
				; Calculates the factorial of an integer, n.
				;
				; Accepts the stack parameters (n, @answer)
				;	n: Number to compute factorial of.
				;	@answer: Address to store answer.
				;--------------------------------------------------
 00000243  50				push	eax
 00000244  53				push	ebx
 00000245  55				push	ebp
 00000246  8B EC			mov		ebp, esp

 00000248  8B 5D 14			mov		ebx, [ebp + 20]		;Load n.
 0000024B  8B 7D 10			mov		edi, [ebp + 16]		;Load output address.

 0000024E  83 FB 00			cmp		ebx, 0				;Base case.
 00000251  74 1B			je		base

 00000253  83 FB 01			cmp		ebx, 1				;Base case.
 00000256  74 16			je		base

 00000258			recurse:

 00000258  4B				dec		ebx					;Recursive call with n-1.
 00000259  53				push	ebx
 0000025A  57				push	edi
 0000025B  E8 FFFFFFE3			call	Factorial

 00000260  8B 5D 14			mov		ebx, [ebp + 20]		;Load this stack frame's value of n.
 00000263  8B 7D 10			mov		edi, [ebp + 16]		;This is (n-1)!

 00000266  8B 07			mov		eax, [edi]
 00000268  F7 E3			mul		ebx					;n * (n-1)!
 0000026A  89 07			mov		[edi], eax
 0000026C  EB 02			jmp		quit

 0000026E			base:
 0000026E  FF 07			inc DWORD PTR[edi]			;Needed in case N starts off as zero. Otherwise, exits when N reaches 1.

 00000270			quit:
 00000270  5D				pop		ebp
 00000271  5B				pop		ebx
 00000272  58				pop		eax

 00000273  C2 0008			ret 8

 00000276			Factorial ENDP

				;--------------------------------------------------
 00000276			ShowResults PROC
				;
				; Displays the answer to the nCr problem, and determines
				; if the user answered correctly.
				;
				; Accepts the stack parameters (n, r, answer, guess)
				;	n: The value of n used for the nCr problem.
				;	r: The value of r used for the nCr problem.
				;	answer: Correct answer to the nCr problem.
				;	guess: User-entered answer to the problem.
				;--------------------------------------------------
 00000276  55				push	ebp
 00000277  8B EC			mov		ebp, esp

					mWriteStr	ansStr1
 00000279  52		     1		push	edx
 0000027A  BA 0000016A R     1		mov		edx, OFFSET ansStr1
 0000027F  E8 00000000 E     1		call	WriteString
 00000284  5A		     1		pop		edx
 00000285  8B 45 0C			mov		eax, [ebp + 12]		;Load correct answer.
 00000288  E8 00000000 E		call	WriteDec

					mWriteStr	ansStr2
 0000028D  52		     1		push	edx
 0000028E  BA 00000175 R     1		mov		edx, OFFSET ansStr2
 00000293  E8 00000000 E     1		call	WriteString
 00000298  5A		     1		pop		edx
 00000299  8B 45 10			mov		eax, [ebp + 16]		;Load r.
 0000029C  E8 00000000 E		call	WriteDec

					mWriteStr	ansStr3
 000002A1  52		     1		push	edx
 000002A2  BA 00000187 R     1		mov		edx, OFFSET ansStr3
 000002A7  E8 00000000 E     1		call	WriteString
 000002AC  5A		     1		pop		edx
 000002AD  8B 45 14			mov		eax, [ebp + 20]		;Load n.
 000002B0  E8 00000000 E		call	WriteDec
					mWriteStr	ansStr4
 000002B5  52		     1		push	edx
 000002B6  BA 0000019D R     1		mov		edx, OFFSET ansStr4
 000002BB  E8 00000000 E     1		call	WriteString
 000002C0  5A		     1		pop		edx

 000002C1			validate:
					
 000002C1  8B 45 0C			mov		eax, [ebp + 12]    ;Correct answer.
 000002C4  8B 5D 08			mov		ebx, [ebp + 8]	   ;User's answer.

 000002C7  3B C3			cmp		eax, ebx		   ;Compare user answer to correct answer.
 000002C9  74 13			je		correct

 000002CB  E8 00000000 E		call	CrLf
					mWriteStr incorrectStr
 000002D0  52		     1		push	edx
 000002D1  BA 0000019F R     1		mov		edx, OFFSET incorrectStr
 000002D6  E8 00000000 E     1		call	WriteString
 000002DB  5A		     1		pop		edx
 000002DC  EB 11			jmp		return

 000002DE			correct:
 000002DE  E8 00000000 E		call	CrLf
					mWriteStr correctStr
 000002E3  52		     1		push	edx
 000002E4  BA 000001CE R     1		mov		edx, OFFSET correctStr
 000002E9  E8 00000000 E     1		call	WriteString
 000002EE  5A		     1		pop		edx

 000002EF			return:

 000002EF  E8 00000000 E		call	CrLf
 000002F4  E8 00000000 E		call	CrLf
 000002F9  5D				pop		ebp
 000002FA  C2 0010			ret 16

 000002FD			ShowResults ENDP

				;--------------------------------------------------
 000002FD			AskPlayAgain PROC
				;
				; Asks user if they would like to solve another
				; problem.
				;
				; Returns: ZF = 1 if user indicates they want another
				; problem; else, ZF = 0.
				;
				;
				;--------------------------------------------------
 000002FD  50				push	eax
 000002FE  51				push	ecx
 000002FF  52				push	edx
					mWriteStr playAgainStr
 00000300  52		     1		push	edx
 00000301  BA 000001F1 R     1		mov		edx, OFFSET playAgainStr
 00000306  E8 00000000 E     1		call	WriteString
 0000030B  5A		     1		pop		edx

 0000030C  33 D2			xor		edx, edx
 0000030E  BA 0000025B R		mov		edx, OFFSET playAgainBuffer
 00000313  B9 00000001			mov		ecx, 1
 00000318  E8 00000000 E		call	ReadChar			;User will enter 'Y' or 'N'. Case insensitive.

					;Check user's input.
 0000031D  3C 79			cmp		al, 'y'				;Entered 'y'.
 0000031F  74 2E			je		onDone
 00000321  3C 59			cmp		al, 'Y'
 00000323  74 2A			je		onDone				;Entered 'Y'.
 00000325  3C 6E			cmp		al, 'n'				;Entered 'n'.
 00000327  74 1C			je		nEntered
 00000329  3C 4E			cmp		al, 'N'				;Entered 'N'.
 0000032B  74 18			je		nEntered
					
					;Something other than 'y' or 'n' entered. Interpret as intention to exit.
 0000032D  E8 00000000 E		call	CrLf
					mWriteStr playAgainErr
 00000332  52		     1		push	edx
 00000333  BA 00000217 R     1		mov		edx, OFFSET playAgainErr
 00000338  E8 00000000 E     1		call	WriteString
 0000033D  5A		     1		pop		edx
 0000033E  E8 00000000 E		call	CrLf
 00000343  EB 0A			jmp		onDone

 00000345			nEntered:							;Clear ZF.
 00000345  B8 00000000			mov		eax, 0
 0000034A  83 F8 01			cmp		eax, 1
 0000034D  EB 00			jmp		onDone

 0000034F			onDone:								;Need to reset variables for next round.
 0000034F  BF 00000264 R		mov		edi, OFFSET usrAnswer
 00000354  B8 00000000			mov		eax, 0
 00000359  89 07			mov		[edi], eax				;Clear user's last answer.

 0000035B  BF 00000268 R		mov		edi, OFFSET theAnswer	;Clear last problem's answer.
 00000360  89 07			mov		[edi], eax

 00000362  5A				pop		edx
 00000363  59				pop		ecx
 00000364  58				pop		eax

 00000365  C3				ret

 00000366			AskPlayAgain ENDP
				END main
Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/08/18 18:23:24
Program 6      (program6.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mWriteStr  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000026C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000366 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AskPlayAgain . . . . . . . . . .	P Near	 000002FD _TEXT	Length= 00000069 Public STDCALL
  nEntered . . . . . . . . . . .	L Near	 00000345 _TEXT	
  onDone . . . . . . . . . . . .	L Near	 0000034F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Combinations . . . . . . . . . .	P Near	 000001F6 _TEXT	Length= 0000004D Public STDCALL
  nFac . . . . . . . . . . . . .	L Near	 000001FF _TEXT	
  rFac . . . . . . . . . . . . .	L Near	 00000208 _TEXT	
  nMinRFac . . . . . . . . . . .	L Near	 0000021B _TEXT	
  finalAnswer  . . . . . . . . .	L Near	 00000233 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Factorial  . . . . . . . . . . .	P Near	 00000243 _TEXT	Length= 00000033 Public STDCALL
  recurse  . . . . . . . . . . .	L Near	 00000258 _TEXT	
  base . . . . . . . . . . . . .	L Near	 0000026E _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000270 _TEXT	
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetData  . . . . . . . . . . . .	P Near	 00000143 _TEXT	Length= 00000051 Public STDCALL
  getInput . . . . . . . . . . .	L Near	 00000155 _TEXT	
  convertInput . . . . . . . . .	L Near	 00000184 _TEXT	
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 0000007F _TEXT	Length= 0000005B Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsNumeric  . . . . . . . . . . .	P Near	 00000194 _TEXT	Length= 00000032 Public STDCALL
  nextDigit  . . . . . . . . . .	L Near	 000001A7 _TEXT	
  emptyStr . . . . . . . . . . .	L Near	 000001B9 _TEXT	
  finished . . . . . . . . . . .	L Near	 000001BE _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowProblem  . . . . . . . . . .	P Near	 000000DA _TEXT	Length= 00000069 Public STDCALL
  genN . . . . . . . . . . . . .	L Near	 000000DD _TEXT	
  printN . . . . . . . . . . . .	L Near	 000000FD _TEXT	
  genR . . . . . . . . . . . . .	L Near	 00000113 _TEXT	
  printR . . . . . . . . . . . .	L Near	 00000124 _TEXT	
ShowResults  . . . . . . . . . .	P Near	 00000276 _TEXT	Length= 00000087 Public STDCALL
  validate . . . . . . . . . . .	L Near	 000002C1 _TEXT	
  correct  . . . . . . . . . . .	L Near	 000002DE _TEXT	
  return . . . . . . . . . . . .	L Near	 000002EF _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringToNumber . . . . . . . . .	P Near	 000001C6 _TEXT	Length= 00000030 Public STDCALL
  convertChar  . . . . . . . . .	L Near	 000001D8 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007F Public STDCALL
  play . . . . . . . . . . . . .	L Near	 0000000A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_BUFFER_SIZE  . . . . . . .	Number	 0000000Bh   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_MAX  . . . . . . . . . . . . .	Number	 0000000Ch   
N_MIN  . . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
R_MIN  . . . . . . . . . . . . .	Number	 00000001h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ansStr1  . . . . . . . . . . . .	Byte	 0000016A _DATA	
ansStr2  . . . . . . . . . . . .	Byte	 00000175 _DATA	
ansStr3  . . . . . . . . . . . .	Byte	 00000187 _DATA	
ansStr4  . . . . . . . . . . . .	Byte	 0000019D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
correctStr . . . . . . . . . . .	Byte	 000001CE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeStr . . . . . . . . . . .	Byte	 00000252 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectStr . . . . . . . . . .	Byte	 0000019F _DATA	
inputErrMsg  . . . . . . . . . .	Byte	 0000013B _DATA	
instruct1  . . . . . . . . . . .	Byte	 00000030 _DATA	
instruct2  . . . . . . . . . . .	Byte	 00000063 _DATA	
instruct3  . . . . . . . . . . .	Byte	 0000009E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 00000013 _DATA	
nStr . . . . . . . . . . . . . .	Byte	 000000C5 _DATA	
nVal . . . . . . . . . . . . . .	DWord	 0000025C _DATA	
playAgainBuffer  . . . . . . . .	Byte	 0000025B _DATA	
playAgainErr . . . . . . . . . .	Byte	 00000217 _DATA	
playAgainStr . . . . . . . . . .	Byte	 000001F1 _DATA	
problemPrompt  . . . . . . . . .	Byte	 00000111 _DATA	
programName  . . . . . . . . . .	Byte	 00000000 _DATA	
rStr . . . . . . . . . . . . . .	Byte	 000000E5 _DATA	
rVal . . . . . . . . . . . . . .	DWord	 00000260 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
theAnswer  . . . . . . . . . . .	DWord	 00000268 _DATA	
usrAnswerStr . . . . . . . . . .	Byte	 00000130 _DATA	
usrAnswer  . . . . . . . . . . .	DWord	 00000264 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
