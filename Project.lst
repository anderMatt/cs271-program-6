Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/06/18 21:05:45
Program 6      (program6.asm				     Page 1 - 1


				TITLE Program 6      (program6.asm)

				; Author: Matthew Anderson			anderma8@oregonstate.edu
				; Course: CS 271 - Program 6        Date: March 5, 2018
				;
				; Description: Presents the user with an nCr combinatorics problem,
				;  and evaluates the entered answer. 'n' will be a random number in [3, 12],
				;  and 'r' will be a random number in [1, n]. Repeats until user decides to
				;  exit. Demonstrates recursive implementation of calculating nCr.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000003			N_MIN = 3
 = 0000000C			N_MAX = 12
 = 00000001			R_MIN = 1				;R_MAX depends on user input.
 = 0000000B			INPUT_BUFFER_SIZE = 11	;Size of user answer input buffer.

				;--------------------------------------------------
				mWriteStr MACRO buffer				
				;
				; This macro prints a string. Accepts location
				; of the string buffer.
				;
				; Implementation borrowed from Week 9 class 
				;  lectures.
				;--------------------------------------------------
					push	edx
					mov		edx, OFFSET buffer
					call	WriteString
					pop		edx

				ENDM
				;--------------------------------------------------


 00000000			.data
 00000000 43 6F 6D 62 69	programName		BYTE	"Combinatorics Quiz",0
	   6E 61 74 6F 72
	   69 63 73 20 51
	   75 69 7A 00
 00000013 57 72 69 74 74	myName			BYTE	"Written By: Matthew Anderson",0
	   65 6E 20 42 79
	   3A 20 4D 61 74
	   74 68 65 77 20
	   41 6E 64 65 72
	   73 6F 6E 00
 00000030 49 20 77 69 6C	instruct1		BYTE	"I will ask you to calculate the number of possible",0
	   6C 20 61 73 6B
	   20 79 6F 75 20
	   74 6F 20 63 61
	   6C 63 75 6C 61
	   74 65 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 70 6F 73
	   73 69 62 6C 65
	   00
 00000063 63 6F 6D 62 69	instruct2		BYTE	"combinations of r items taken from a set of n items (nCr),",0
	   6E 61 74 69 6F
	   6E 73 20 6F 66
	   20 72 20 69 74
	   65 6D 73 20 74
	   61 6B 65 6E 20
	   66 72 6F 6D 20
	   61 20 73 65 74
	   20 6F 66 20 6E
	   20 69 74 65 6D
	   73 20 28 6E 43
	   72 29 2C 00
 0000009E 61 6E 64 20 63	instruct3		BYTE	"and check that your answer is correct.",0
	   68 65 63 6B 20
	   74 68 61 74 20
	   79 6F 75 72 20
	   61 6E 73 77 65
	   72 20 69 73 20
	   63 6F 72 72 65
	   63 74 2E 00

 000000C5 4E 75 6D 62 65	nStr			BYTE	"Number of elements in the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 69
	   6E 20 74 68 65
	   20 73 65 74 3A
	   20 00
 000000E5 4E 75 6D 62 65	rStr			BYTE	"Number of elements to choose from the set: ",0
	   72 20 6F 66 20
	   65 6C 65 6D 65
	   6E 74 73 20 74
	   6F 20 63 68 6F
	   6F 73 65 20 66
	   72 6F 6D 20 74
	   68 65 20 73 65
	   74 3A 20 00
 00000111 48 6F 77 20 6D	problemPrompt	BYTE	"How many ways can you choose? ",0
	   61 6E 79 20 77
	   61 79 73 20 63
	   61 6E 20 79 6F
	   75 20 63 68 6F
	   6F 73 65 3F 20
	   00
 00000130  0000000B [		usrAnswerStr	BYTE	INPUT_BUFFER_SIZE DUP(?)
	    00
	   ]
 0000013B 59 6F 75 20 6D	inputErrMsg		BYTE	"You must enter a positive integer! Try again: ",0
	   75 73 74 20 65
	   6E 74 65 72 20
	   61 20 70 6F 73
	   69 74 69 76 65
	   20 69 6E 74 65
	   67 65 72 21 20
	   54 72 79 20 61
	   67 61 69 6E 3A
	   20 00

 0000016A 00000000		nVal			DWORD	?
 0000016E 00000000		rVal			DWORD	?
 00000172 00000000		usrAnswer		DWORD	?


 00000000			.code
 00000000			main PROC

 00000000  E8 00000000 E		call	Randomize			;Seed random number generator.
 00000005  E8 00000025			call	Introduction

 0000000A  68 0000016A R		push	OFFSET nVal
 0000000F  68 0000016E R		push	OFFSET rVal
 00000014  E8 00000076			call	ShowProblem

 00000019  68 00000172 R		push	OFFSET	usrAnswer
 0000001E  E8 000000CB			call	GetData
 00000023  E8 00000000 E		call	CrLf


					exit	; exit to operating system
 00000028  6A 00	   *	    push   +000000000h
 0000002A  E8 00000000 E   *	    call   ExitProcess
 0000002F			main ENDP

				;--------------------------------------------------
 0000002F			Introduction PROC
				;
				; Prints a greeting message and program
				; instructions.
				;
				;--------------------------------------------------
					mWriteStr	programName
 0000002F  52		     1		push	edx
 00000030  BA 00000000 R     1		mov		edx, OFFSET programName
 00000035  E8 00000000 E     1		call	WriteString
 0000003A  5A		     1		pop		edx
 0000003B  E8 00000000 E		call		CrLf
					mWriteStr	myName
 00000040  52		     1		push	edx
 00000041  BA 00000013 R     1		mov		edx, OFFSET myName
 00000046  E8 00000000 E     1		call	WriteString
 0000004B  5A		     1		pop		edx
 0000004C  E8 00000000 E		call		CrLf
 00000051  E8 00000000 E		call		CrLf
					mWriteStr	instruct1
 00000056  52		     1		push	edx
 00000057  BA 00000030 R     1		mov		edx, OFFSET instruct1
 0000005C  E8 00000000 E     1		call	WriteString
 00000061  5A		     1		pop		edx
 00000062  E8 00000000 E		call		CrLf
					mWriteStr	instruct2
 00000067  52		     1		push	edx
 00000068  BA 00000063 R     1		mov		edx, OFFSET instruct2
 0000006D  E8 00000000 E     1		call	WriteString
 00000072  5A		     1		pop		edx
 00000073  E8 00000000 E		call		CrLf
					mWriteStr	instruct3
 00000078  52		     1		push	edx
 00000079  BA 0000009E R     1		mov		edx, OFFSET instruct3
 0000007E  E8 00000000 E     1		call	WriteString
 00000083  5A		     1		pop		edx
 00000084  E8 00000000 E		call		CrLf
 00000089  E8 00000000 E		call		CrLf

 0000008E  C3				ret

 0000008F			Introduction ENDP


				;--------------------------------------------------
 0000008F			ShowProblem PROC
				;
				; Generates an nCr combinatorics problem for the user
				; to solve. 'n' is a randomly generated number in
				; [N_MIN, N_MAX]. 'r' is a randomly generated number
				; in [R_MIN, n].
				;
				; Receives the stack parameters (@n, @r).
				;	@n: the address to store the generated value
				;	 of n.
				;	@r: the address to store the generated value
				;	 of r.
				;--------------------------------------------------
 0000008F  55				push	ebp
 00000090  8B EC			mov		ebp, esp
					
					;To generate 'n', we need to pass N_MAX - N_MIN + 1 to RandomRange.
 00000092			genN:
 00000092  B8 0000000C			mov		eax, N_MAX
 00000097  83 E8 03			sub		eax, N_MIN
 0000009A  40				inc		eax

 0000009B  E8 00000000 E		call	RandomRange			;Generate 'n'.
 000000A0  83 C0 03			add		eax, N_MIN			;Get generated value into valid range.

 000000A3  8B 7D 0C			mov		edi, [ebp + 12]		;Load @n.
 000000A6  89 07			mov		[edi], eax			;Save 'n'

 000000A8			printN:							;Print number of elements.
					mWriteStr nStr
 000000A8  52		     1		push	edx
 000000A9  BA 000000C5 R     1		mov		edx, OFFSET nStr
 000000AE  E8 00000000 E     1		call	WriteString
 000000B3  5A		     1		pop		edx
 000000B4  E8 00000000 E		call	WriteDec
 000000B9  E8 00000000 E		call	CrLf

 000000BE			genR:
 000000BE  83 E8 01			sub		eax, R_MIN			;Pass 'n' - R_MIN + 1 to RandomRange. EAX contains 'n'.
 000000C1  40				inc		eax

 000000C2  E8 00000000 E		call	RandomRange
 000000C7  83 C0 01			add		eax, R_MIN			;EAX contains 'r'.

 000000CA  8B 7D 08			mov		edi, [ebp + 8]
 000000CD  89 07			mov		[edi], eax			;Save 'r'.

 000000CF			printR:
					mWriteStr rStr
 000000CF  52		     1		push	edx
 000000D0  BA 000000E5 R     1		mov		edx, OFFSET rStr
 000000D5  E8 00000000 E     1		call	WriteString
 000000DA  5A		     1		pop		edx
 000000DB  E8 00000000 E		call	WriteDec
 000000E0  E8 00000000 E		call	CrLf
 000000E5  E8 00000000 E		call	CrLf

 000000EA  5D				pop		ebp
 000000EB  C2 0008			ret 8
					
 000000EE			ShowProblem ENDP


				;--------------------------------------------------
 000000EE			GetData PROC
				;
				; Prompts user to enter their answer to the nCr
				; problem. Validates the entered string into
				; the numeric value it represents.

				; Receives the stack parameters (@a).
				;	@a: Address to store user's answer.
				;--------------------------------------------------
 000000EE  55				push	ebp
 000000EF  8B EC			mov		ebp, esp
 000000F1  8B 7D 08			mov		edi, [ebp + 8]		;EDI contains destination address.

					mWriteStr problemPrompt
 000000F4  52		     1		push	edx
 000000F5  BA 00000111 R     1		mov		edx, OFFSET problemPrompt
 000000FA  E8 00000000 E     1		call	WriteString
 000000FF  5A		     1		pop		edx

 00000100			getInput:
 00000100  BA 00000130 R		mov		edx, OFFSET usrAnswerStr
 00000105  B9 0000000A			mov		ecx, INPUT_BUFFER_SIZE - 1
 0000010A  E8 00000000 E		call	ReadString			;usrAnswerStr contains entered string.

 0000010F  68 00000130 R		push	OFFSET usrAnswerStr
 00000114  50				push	eax					;Size of input string.
 00000115  E8 00000025			call	IsNumeric

 0000011A  74 13			jz		convertInput			

					;User entered a non-numeric string. Print error, and try again.
 0000011C  E8 00000000 E		call	CrLf
					mWriteStr	inputErrMsg
 00000121  52		     1		push	edx
 00000122  BA 0000013B R     1		mov		edx, OFFSET inputErrMsg
 00000127  E8 00000000 E     1		call	WriteString
 0000012C  5A		     1		pop		edx
 0000012D  EB D1			jmp		getInput

 0000012F			convertInput:	
					
 0000012F  68 00000130 R		push	OFFSET usrAnswerStr
 00000134  50				push	eax					;Number of digits in entered string.
 00000135  57				push	edi					;Output variable.
 00000136  E8 00000036			call	StringToNumber

 0000013B  5D				pop	ebp

 0000013C  C2 0004			ret 4

 0000013F			GetData ENDP


				;--------------------------------------------------
 0000013F			IsNumeric PROC
				;
				; Checks if a string represents a valid POSITIVE 
				; integer.

				; Receives the stack parameters (@a, size).
				;	@a: Address of the string.
				;	size: size of the string.
				;
				; Returns: ZF = 1 if the string represents a valid
				; integer; else, ZF = 0.
				;--------------------------------------------------
 0000013F  56				push	esi
 00000140  51				push	ecx
 00000141  50				push	eax
 00000142  53				push	ebx
 00000143  55				push	ebp
 00000144  8B EC			mov		ebp, esp

 00000146  8B 75 1C			mov		esi, [ebp + 28]		;ESI contains address of string.
 00000149  8B 4D 18			mov		ecx, [ebp + 24]		;ECX contains size of string.
 0000014C  FC				cld

					;Check if string is empty. If yes, set ZF = 0 and finish.
 0000014D  83 F9 00			cmp		ecx, 0
 00000150  74 12			je		emptyStr

 00000152			nextDigit:
 00000152  AC				lodsb						;AL contains next character.

					;Valid numeric characters will have ASCII codes in [48, 57].
 00000153  3C 30			cmp		al, 48
 00000155  7C 12			jl		finished			;ZF = 0
 00000157  3C 39			cmp		al, 57
 00000159  7F 0E			jg		finished			;ZF = 0

 0000015B  E2 F5			loop	nextDigit

 0000015D  33 C0			xor		eax, eax
 0000015F  83 F8 00			cmp		eax, 0				;Set ZF = 1, since string is valid integer representation.
 00000162  EB 05			jmp		finished

 00000164			emptyStr:	;String was empty. Set ZF = 0, since this isn't valid numeric representation.
 00000164  33 C0			xor		eax, eax
 00000166  83 F8 01			cmp		eax, 1

 00000169			finished:
 00000169  5D				pop		ebp
 0000016A  5B				pop		ebx
 0000016B  58				pop		eax
 0000016C  59				pop		ecx
 0000016D  5E				pop		esi

 0000016E  C2 0008			ret		8

 00000171			IsNumeric ENDP

				;--------------------------------------------------
 00000171			StringToNumber PROC
				;
				; Generates the numeric value of a string representation
				; of a positive integer.
				;
				; Receives stack parameters (@s, n, @o).
				;	@s: string representation of positive integer.
				;	n: number of characters before null-terminator.
				;	@o: output variable to store numeric value.
				;
				;--------------------------------------------------
 00000171  50				push	eax
 00000172  56				push	esi
 00000173  51				push	ecx
 00000174  53				push	ebx
 00000175  55				push	ebp

 00000176  8B EC			mov		ebp, esp

 00000178  8B 75 20			mov		esi, [ebp + 32]		;Load address of string.
 0000017B  8B 4D 1C			mov		ecx, [ebp + 28]		;Load number of characters.
 0000017E  8B 7D 18			mov		edi, [ebp + 24]		;Load output variable.

 00000181  33 C0			xor		eax, eax			;Holds numeric value.

 00000183			convertChar:
 00000183  BB 0000000A			mov		ebx, 10
 00000188  F7 E3			mul		ebx

 0000018A  50				push	eax					;Save current value before loading next byte.
 0000018B  AC				lodsb

 0000018C  0F B6 D8			movzx	ebx, al
 0000018F  83 EB 30			sub		ebx, 48				;Convert char to numeric value.

 00000192  58				pop		eax
 00000193  03 C3			add		eax, ebx			;Add digit to accumulating value.

 00000195  E2 EC			loop	convertChar

 00000197  89 07			mov		[edi], eax			;Save numeric value to output variable.

 00000199  5D				pop		ebp
 0000019A  5B				pop		ebx
 0000019B  59				pop		ecx
 0000019C  5E				pop		esi
 0000019D  58				pop		eax

 0000019E  C2 000C			ret 12

 000001A1			StringToNumber ENDP

				END main
Microsoft (R) Macro Assembler Version 14.12.25831.0	    03/06/18 21:05:45
Program 6      (program6.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mWriteStr  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000176 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001A1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetData  . . . . . . . . . . . .	P Near	 000000EE _TEXT	Length= 00000051 Public STDCALL
  getInput . . . . . . . . . . .	L Near	 00000100 _TEXT	
  convertInput . . . . . . . . .	L Near	 0000012F _TEXT	
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 0000002F _TEXT	Length= 00000060 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsNumeric  . . . . . . . . . . .	P Near	 0000013F _TEXT	Length= 00000032 Public STDCALL
  nextDigit  . . . . . . . . . .	L Near	 00000152 _TEXT	
  emptyStr . . . . . . . . . . .	L Near	 00000164 _TEXT	
  finished . . . . . . . . . . .	L Near	 00000169 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowProblem  . . . . . . . . . .	P Near	 0000008F _TEXT	Length= 0000005F Public STDCALL
  genN . . . . . . . . . . . . .	L Near	 00000092 _TEXT	
  printN . . . . . . . . . . . .	L Near	 000000A8 _TEXT	
  genR . . . . . . . . . . . . .	L Near	 000000BE _TEXT	
  printR . . . . . . . . . . . .	L Near	 000000CF _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringToNumber . . . . . . . . .	P Near	 00000171 _TEXT	Length= 00000030 Public STDCALL
  convertChar  . . . . . . . . .	L Near	 00000183 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002F Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INPUT_BUFFER_SIZE  . . . . . . .	Number	 0000000Bh   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
N_MAX  . . . . . . . . . . . . .	Number	 0000000Ch   
N_MIN  . . . . . . . . . . . . .	Number	 00000003h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
R_MIN  . . . . . . . . . . . . .	Number	 00000001h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputErrMsg  . . . . . . . . . .	Byte	 0000013B _DATA	
instruct1  . . . . . . . . . . .	Byte	 00000030 _DATA	
instruct2  . . . . . . . . . . .	Byte	 00000063 _DATA	
instruct3  . . . . . . . . . . .	Byte	 0000009E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myName . . . . . . . . . . . . .	Byte	 00000013 _DATA	
nStr . . . . . . . . . . . . . .	Byte	 000000C5 _DATA	
nVal . . . . . . . . . . . . . .	DWord	 0000016A _DATA	
problemPrompt  . . . . . . . . .	Byte	 00000111 _DATA	
programName  . . . . . . . . . .	Byte	 00000000 _DATA	
rStr . . . . . . . . . . . . . .	Byte	 000000E5 _DATA	
rVal . . . . . . . . . . . . . .	DWord	 0000016E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
usrAnswerStr . . . . . . . . . .	Byte	 00000130 _DATA	
usrAnswer  . . . . . . . . . . .	DWord	 00000172 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
